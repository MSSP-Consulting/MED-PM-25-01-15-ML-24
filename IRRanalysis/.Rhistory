# Initialize results dataframe
kappa_results <- data.frame(
Criterion = 1:12,
Subjects = NA,
Kappa = NA,
z = NA,
p_value = NA
)
for (i in 1:12) {
# Reshape data for this criterion
crit <- all_ratings %>%
filter(Criterion == i) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question)
# Drop Criterion column
crit_clean <- crit %>%
select(-Criterion)
# Filter rows with at least 2 non-NA scores
crit_matrix <- as.matrix(crit_clean[rowSums(!is.na(crit_clean)) >= 2, ])
# Only run kappa if matrix is valid
if (nrow(crit_matrix) >= 2) {
result <- tryCatch(
kappam.light(crit_matrix),
error = function(e) NULL
)
if (!is.null(result)) {
kappa_results$Subjects[i] <- result$subjects
kappa_results$Kappa[i] <- result$value
kappa_results$z[i] <- result$statistic
kappa_results$p_value[i] <- result$p.value
}
}
}
print(kappa_results)
for (i in 1:12) {
cat("\n=== Criterion", i, "===\n")
df <- all_ratings %>%
filter(Criterion == i) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
df[df == "N/A"] <- NA
df_filtered <- df[rowSums(!is.na(df)) >= 2, ]
if (nrow(df_filtered) == 0) {
cat("No usable rows after filtering.\n")
} else {
print(table(apply(df_filtered, 1, paste, collapse = "-")))
}
}
plot_data <- kappa_results %>%
mutate(
Criterion = paste0("C", Criterion),
Criterion = factor(Criterion, levels = paste0("C", 1:12)),
Label = ifelse(is.nan(Kappa), "Perfect\nagreement", sprintf("%.2f", round(Kappa, 2))),
Fill = case_when(
is.nan(Kappa) ~ "Perfect",
Kappa >= 0.75 ~ "Excellent",
Kappa >= 0.4  ~ "Moderate",
!is.na(Kappa) ~ "Low",
TRUE ~ "Missing"
)
)
ggplot(plot_data, aes(x = Criterion, y = Kappa, fill = Fill)) +
geom_col(na.rm = TRUE) +
geom_text(aes(label = Label), vjust = -0.5, size = 3) +
scale_fill_manual(
values = c(
"Perfect" = "black",
"Excellent" = "green",
"Moderate" = "blue",
"Low" = "orange",
"Missing" = "gray"
)
) +
labs(
title = "Lightâ€™s Kappa by Rubric Criterion",
y = "Kappa",
x = "Criterion",
fill = "Agreement level"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# test on q1
q1_data <- all_ratings %>%
filter(Question == "Q1") %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
q1_data[q1_data == "N/A"] <- NA
# Keep only criteria (rows) with at least 2 valid scores
q1_filtered <- q1_data[rowSums(!is.na(q1_data)) >= 2, ]
if (nrow(q1_filtered) >= 2) {
q1_matrix <- as.matrix(q1_filtered)
kappa_q1 <- kappam.light(q1_matrix)
print(kappa_q1)
} else {
print("Not enough usable criteria to compute kappa for Question 1.")
}
kappa_by_question <- data.frame(
Question = character(),
Criteria = integer(),
kappa = numeric(),
z = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
# Clean "N/A"
q_data[q_data == "N/A"] <- NA
# Keep criteria with at least 2 valid rater scores
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
mat <- as.matrix(q_filtered)
k <- tryCatch({
result <- suppressWarnings(kappam.light(mat))
data.frame(
Question = q,
Criteria_Used = nrow(mat),
Kappa = result$value,
z = result$statistic,
p_value = result$p.value
)
}, error = function(e) {
data.frame(Question = q, Criteria_Used = nrow(mat), Kappa = NA, z = NA, p_value = NA)
})
} else {
# Not enough usable criteria to compute kappa
k <- data.frame(Question = q, Criteria = nrow(q_filtered), Kappa = NA, z = NA, p_value = NA)
}
kappa_by_question <- rbind(kappa_by_question, k)
}
kappa_by_question
light_kappa_by_question <- data.frame(
Question = character(),
Subjects = integer(),
Raters = integer(),
Kappa = numeric(),
Z = numeric(),
P_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
# Step 1: Filter and pivot the data for one question
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question)
# Step 2: Replace "N/A" with NA
q_data[q_data == "N/A"] <- NA
# Step 3: Keep rows (criteria) with at least 2 valid scores
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
q_matrix <- as.matrix(q_filtered)
result <- tryCatch({
kappa <- kappam.light(q_matrix)
data.frame(
Question = q,
Subjects = kappa$subjects,
Raters = kappa$raters,
Kappa = kappa$value,
Z = kappa$statistic,
P_value = kappa$p.value
)
}, error = function(e) {
data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ncol(q_filtered),
Kappa = NA,
Z = NA,
P_value = NA
)
})
} else {
result <- data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ifelse(nrow(q_data) > 0, ncol(q_data), NA),
Kappa = NA,
Z = NA,
P_value = NA
)
}
light_kappa_by_question <- rbind(light_kappa_by_question, result)
}
# View the final result
print(light_kappa_by_question)
kappa_by_question <- data.frame(
Question = character(),
Criteria = integer(),
kappa = numeric(),
z = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
# Clean "N/A"
q_data[q_data == "N/A"] <- NA
# Keep criteria with at least 2 valid rater scores
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
mat <- as.matrix(q_filtered)
k <- tryCatch({
result <- suppressWarnings(kappam.light(mat))
data.frame(
Question = q,
Criteria_Used = nrow(mat),
Kappa = result$value,
z = result$statistic,
p_value = result$p.value
)
}, error = function(e) {
data.frame(Question = q, Criteria_Used = nrow(mat), Kappa = NA, z = NA, p_value = NA)
})
} else {
# Not enough usable criteria to compute kappa
k <- data.frame(Question = q, Criteria = nrow(q_filtered), Kappa = NA, z = NA, p_value = NA)
}
kappa_by_question <- rbind(kappa_by_question, k)
}
kappa_by_question
light_kappa_by_question <- data.frame(
Question = character(),
Subjects = integer(),
Raters = integer(),
Kappa = numeric(),
Z = numeric(),
P_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question)
q_data[q_data == "N/A"] <- NA
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
q_matrix <- as.matrix(q_filtered)
result <- tryCatch({
kappa <- kappam.light(q_matrix)
data.frame(
Question = q,
Subjects = kappa$subjects,
Raters = kappa$raters,
Kappa = kappa$value,
Z = kappa$statistic,
P_value = kappa$p.value
)
}, error = function(e) {
data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ncol(q_filtered),
Kappa = NA,
Z = NA,
P_value = NA
)
})
} else {
result <- data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ifelse(nrow(q_data) > 0, ncol(q_data), NA),
Kappa = NA,
Z = NA,
P_value = NA
)
}
light_kappa_by_question <- rbind(light_kappa_by_question, result)
}
print(light_kappa_by_question)
light_kappa_by_question <- data.frame(
Question = character(),
Subjects = integer(),
Raters = integer(),
Kappa = numeric(),
Z = numeric(),
P_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question)
q_data[q_data == "N/A"] <- NA
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
q_matrix <- as.matrix(q_filtered)
result <- tryCatch({
kappa <- kappam.light(q_matrix)
data.frame(
Question = q,
Subjects = kappa$subjects,
Raters = kappa$raters,
Kappa = kappa$value,
Z = kappa$statistic,
P_value = kappa$p.value
)
}, error = function(e) {
data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ncol(q_filtered),
Kappa = NA,
Z = NA,
P_value = NA
)
})
} else {
result <- data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ifelse(nrow(q_data) > 0, ncol(q_data), NA),
Kappa = NA,
Z = NA,
P_value = NA
)
}
light_kappa_by_question <- rbind(light_kappa_by_question, result)
}
print(light_kappa_by_question)
light_kappa_by_question <- data.frame(
Question = character(),
Subjects = integer(),
Raters = integer(),
Kappa = numeric(),
Z = numeric(),
P_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
q_data[q_data == "N/A"] <- NA
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
q_matrix <- as.matrix(q_filtered)
result <- tryCatch({
kappa <- kappam.light(q_matrix)
data.frame(
Question = q,
Subjects = kappa$subjects,
Raters = kappa$raters,
Kappa = kappa$value,
Z = kappa$statistic,
P_value = kappa$p.value
)
}, error = function(e) {
data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ncol(q_filtered),
Kappa = NA,
Z = NA,
P_value = NA
)
})
} else {
result <- data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ifelse(nrow(q_data) > 0, ncol(q_data), NA),
Kappa = NA,
Z = NA,
P_value = NA
)
}
light_kappa_by_question <- rbind(light_kappa_by_question, result)
}
print(light_kappa_by_question)
light_kappa_by_question <- data.frame(
Question = character(),
Subjects = integer(),
Raters = integer(),
Kappa = numeric(),
Z = numeric(),
P_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
q_data[q_data == "N/A"] <- NA
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
q_matrix <- as.matrix(q_filtered)
result <- tryCatch({
kappa <- kappam.light(q_matrix)
data.frame(
Question = q,
Subjects = kappa$subjects,
Raters = kappa$raters,
Kappa = kappa$value,
Z = kappa$statistic,
P_value = kappa$p.value
)
}, error = function(e) {
data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ncol(q_filtered),
Kappa = NA,
Z = NA,
P_value = NA
)
})
} else {
result <- data.frame(
Question = q,
Subjects = nrow(q_filtered),
Raters = ifelse(nrow(q_data) > 0, ncol(q_data), NA),
Kappa = NA,
Z = NA,
P_value = NA
)
}
light_kappa_by_question <- rbind(light_kappa_by_question, result)
}
print(light_kappa_by_question)
kappa_by_question <- data.frame(
Question = character(),
Criteria = integer(),
kappa = numeric(),
z = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
# Clean "N/A"
q_data[q_data == "N/A"] <- NA
# Keep criteria with at least 2 valid rater scores
q_filtered <- q_data[rowSums(!is.na(q_data)) >= 2, ]
if (nrow(q_filtered) >= 2) {
mat <- as.matrix(q_filtered)
k <- tryCatch({
result <- suppressWarnings(kappam.light(mat))
data.frame(
Question = q,
Criteria_Used = nrow(mat),
Kappa = result$value,
z = result$statistic,
p_value = result$p.value
)
}, error = function(e) {
data.frame(Question = q, Criteria_Used = nrow(mat), Kappa = NA, z = NA, p_value = NA)
})
} else {
# Not enough usable criteria to compute kappa
k <- data.frame(Question = q, Criteria = nrow(q_filtered), Kappa = NA, z = NA, p_value = NA)
}
kappa_by_question <- rbind(kappa_by_question, k)
}
kappa_by_question
# all criteria used
kappa_by_question <- data.frame(
Question = character(),
Criteria_Used = integer(),
Kappa = numeric(),
z = numeric(),
p_value = numeric(),
stringsAsFactors = FALSE
)
for (q in paste0("Q", 1:30)) {
# Filter and reshape
q_data <- all_ratings %>%
filter(Question == q) %>%
pivot_wider(names_from = Rater, values_from = Score) %>%
select(-Question, -Criterion)
# Convert "N/A" to NA
q_data[q_data == "N/A"] <- NA
# Convert to matrix (no filtering on rows)
mat <- as.matrix(q_data)
# Run Light's Kappa
k <- tryCatch({
result <- suppressWarnings(kappam.light(mat))
data.frame(
Question = q,
Criteria_Used = nrow(mat),
Kappa = result$value,
z = result$statistic,
p_value = result$p.value
)
}, error = function(e) {
# Still return the row, even if kappa fails
data.frame(
Question = q,
Criteria_Used = nrow(mat),
Kappa = NA,
z = NA,
p_value = NA
)
})
# Append result
kappa_by_question <- rbind(kappa_by_question, k)
}
kappa_by_question
